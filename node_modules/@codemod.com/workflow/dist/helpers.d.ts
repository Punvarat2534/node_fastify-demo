export declare const clc: {
    blueBright: (text: string) => any;
    green: (text: string) => any;
    red: (text: string) => any;
    yellow: (text: string) => any;
};
export declare const promiseTimeout: (ms: number) => Promise<unknown>;
export declare const logger: (message: string) => {
    success: (output?: string) => void;
    fail: (error: string) => void;
    warn: (warning: string) => void;
};
export declare const parseRepositories: (repos: string | Readonly<string[]> | ((...args: any[]) => Promise<void>)) => string[];
export declare const parseMultistring: (repos: string | readonly string[], splitWith?: RegExp) => string[];
export type MapChildren<Type extends Record<string, (...args: any[]) => any>> = {
    [Property in keyof Type]: ReturnType<Type[Property]>;
};
export declare const noContextFn: <T extends (...args: any) => ReturnType<T>>(cb: T) => ReturnType<T>;
export declare const wrapHelpers: <C, H>(helpers: H, context: C) => H;
