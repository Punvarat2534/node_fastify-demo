import type { PLazy } from "../PLazy.js";
declare const callbackHelpers: {
    getNode: () => import("@ast-grep/napi").SgNode;
    getMatch: (m: string) => import("@ast-grep/napi").SgNode | null;
    getMultipleMatches: (m: string) => import("@ast-grep/napi").SgNode[];
};
export type CallbackHelpers = typeof callbackHelpers;
export type FilterReturn = PLazy<Helpers> & Helpers;
/**
 * @description Filter the nodes found with astGrep using callback function. If function returns true - node will be included in the result, otherwise - excluded.
 * @param callback - Callback function that will be executed for each node found with astGrep. If function returns true - node will be included in the result, otherwise - excluded.
 * @example
 * ```ts
 * // Replace all console.log calls with "2" where the first argument is "1"
 * await astGrep`console.log($A)`
 *   .filter(({ getMatch }) => getMatch("A") === "1")
 *   .replace`console.log(2)`
 * ```
 * @see {@link map}
 * @see {@link replace}
 * @see {@link filter}
 * @see {@link exists}
 * @see {@link ai}
 */
export declare function filterLogic(callback: (helpers: CallbackHelpers) => Promise<boolean> | boolean): FilterReturn;
export declare const filter: typeof filterLogic;
declare const helpers: {
    map: typeof import("./map.js").mapLogic;
    filter: typeof filterLogic;
    replace: typeof import("./replace.js").replaceLogic;
    ai: typeof import("../ai/ai.js").aiLogic;
    exists: typeof import("./exists.js").existsLogic;
};
type Helpers = typeof helpers;
export {};
