import type { PLazy } from "../PLazy.js";
declare const callbackHelpers: {
    getNode: () => import("@ast-grep/napi").SgNode;
    getMatch: (m: string) => import("@ast-grep/napi").SgNode | null;
    getMultipleMatches: (m: string) => import("@ast-grep/napi").SgNode[];
};
export type CallbackHelpers = typeof callbackHelpers;
export type ReplaceReturn = PLazy<Helpers> & Helpers;
/**
 * @description Replace every found with astGrep node with the replacement string (or template literal). String can contain single match or multiple matches.
 * @param replacement The replacement string or template literal
 * @example
 * ```ts
 * // Replace every console.log with remove message
 * await astGrep`console.log($$$A)`
 *   .replace('∕* removed console.log *∕')
 * ```
 * @example
 * ```ts
 * // Replace every console.log with console.error
 * await astGrep`console.log($$$A)`
 *   .replace`console.error($$$A)`
 * ```
 */
export declare function replaceLogic(rawReplacement: string | Readonly<string[]>): ReplaceReturn;
/**
 * @description Replace every found with astGrep node with the replacement string (or template literal) using callback.
 * @param callback The callback function that returns the replacement string or template literal. First argument is the helpers object, which has getNode, getMatch and getMultipleMatches functions.
 * @example
 * ```ts
 * // Replace every console.log with remove message
 * await astGrep`console.log($$$A)`
 *   .replace(({ getMultipleMatches }) =>
 *     `console.error(${getMultipleMatches('A').join(', ')}`)
 * ```
 */
export declare function replaceLogic(callback: (helpers: CallbackHelpers) => Promise<string | undefined> | string | undefined): ReplaceReturn;
export declare const replace: typeof replaceLogic;
declare const helpers: {
    map: typeof import("./map.js").mapLogic;
};
export type Helpers = typeof helpers;
export {};
