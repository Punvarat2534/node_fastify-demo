import { type NapiConfig, SgNode } from "@ast-grep/napi";
import type { PLazy } from "../PLazy.js";
export { SgNode };
type AstGrepPattern = string | {
    selector: string;
    context: string;
    strictness?: "cst" | "smart" | "ast" | "relaxed" | "signature";
};
type AstGrepStopBy = "end" | "neighbour" | AstGrepInsideRule;
type AstGrepInsideRule = {
    pattern: AstGrepPattern;
    stopBy?: AstGrepStopBy;
    field?: string;
};
type AstGrepHasRule = {
    kind: string;
    stopBy?: AstGrepStopBy;
    field?: string;
};
type AstGrepSiblingRule = {
    kind: string;
    stopBy?: AstGrepStopBy;
};
type AstGrepAtomicRule = {
    pattern: AstGrepPattern;
    kind?: string;
    regex?: string;
    inside?: AstGrepInsideRule;
    has?: AstGrepHasRule;
    precedes?: AstGrepSiblingRule;
    follows?: AstGrepSiblingRule;
};
type AstGrepAllRule = {
    all: AstGrepRules[];
};
type AstGrepAnyRule = {
    any: AstGrepRules[];
};
type AstGrepNotRule = {
    not: AstGrepRules;
};
type AstGrepMatchRule = {
    match: string;
};
type AstGrepRules = AstGrepAtomicRule | AstGrepAllRule | AstGrepAnyRule | AstGrepNotRule | AstGrepMatchRule;
type AstGrepAPI = {
    id: string;
    language: "Bash" | "C" | "Cpp" | "CSharp" | "Css" | "Dart" | "Elixir" | "Go" | "Html" | "Java" | "JavaScript" | "Json" | "Kotlin" | "Lua" | "Php" | "Python" | "Ruby" | "Rust" | "Scala" | "Swift" | "TypeScript" | "Tsx";
    rule: AstGrepRules;
    utils?: any;
    fix?: any;
};
export type AstGrepHelpers = typeof astGrepHelpers;
export type AstGrepAPIHelpers = typeof astGrepAPIHelpers;
/**
 * @description Search for a pattern in the file using [ast-grep](https://ast-grep.github.io/). There are 2 ways to use this function: controlled and uncontrolled. If you will provide `id` in the `query` object - it will be passed to ast-grep CLI (`uncontrolled` mode). In all other cases `controlled` mode will be used with Napi (Node.js bindings to Rust).
 * @param query It could be a string, string literal, [NapiConfig object](https://ast-grep.github.io/reference/api.html#napiconfig)
 * @example
 * ```ts
 * // Pass parameter as string
 * await astGrep("import React from 'react'")
 * ```
 * @example
 * ```ts
 * // Pass parameter as string literal
 * await astGrep`import React from 'react'`
 * ```
 * @example
 * ```ts
 * // Pass parameter as NapiConfig
 * await astGrep({
 *   rule: {
 *     pattern: {
 *       context: "import React from 'react'",
 *       strictness: "relaxed",
 *     },
 *   },
 * })
 * ```
 * @example
 * ```ts
 * // Pass parameter as YAML string literal
 * await astGrep`
 *   rule:
 *     pattern:
 *       context: "import React from 'react'"
 *       strictness: "relaxed"
 * `
 * ```
 * @see {@link map}
 * @see {@link filter}
 * @see {@link exists}
 * @see {@link replace}
 * @see {@link ai}
 */
export declare function astGrepLogic(query: string | readonly string[] | NapiConfig): ReturnType;
/**
 * @description Search for a pattern in the file using [ast-grep](https://ast-grep.github.io/). There are 2 ways to use this function: controlled and uncontrolled. If you will provide `id` in the `query` object - it will be passed to ast-grep CLI (`uncontrolled` mode). In all other cases `controlled` mode will be used with Napi (Node.js bindings to Rust).
 * @description This function is used for `uncontrolled` mode. You can chain call multiple `astGrep` functions to search for multiple patterns in the file using this mode.
 * @param query It could be a string, string literal, [NapiConfig object](https://ast-grep.github.io/reference/api.html#napiconfig)
 * @example
 * ```ts
 * // Pass directly to ast-grep CLI
 * await astGrep({
 *   id: "unique-id",
 *   rule: {
 *     pattern: {
 *       context: "import React from 'react'",
 *       strictness: "relaxed",
 *     },
 *   },
 *   fix: "import * as React from 'react'",
 * })
 * ```
 * @example
 * ```ts
 * // Chain call
 * await astGrep({
 *   id: "unique-id",
 *   rule: {
 *     pattern: {
 *       context: "import React from 'react'",
 *       strictness: "relaxed",
 *     },
 *   },
 *   fix: "import * as React from 'react'",
 * })
 *   .astGrep({
 *     id: "another-unique-id",
 *     rule: {
 *       pattern: {
 *         context: "import { useState } from 'react'",
 *         strictness: "relaxed",
 *       },
 *     },
 *     fix: "import { useRef } from 'react'",
 *   })
 * ```
 */
export declare function astGrepLogic(apiQuery: AstGrepAPI): ReturnTypeAPI;
/**
 * @description Search for a pattern in the file using [ast-grep](https://ast-grep.github.io/). There are 2 ways to use this function: controlled and uncontrolled. If you will provide `id` in the `query` object - it will be passed to ast-grep CLI (`uncontrolled` mode). In all other cases `controlled` mode will be used with Napi (Node.js bindings to Rust).
 * @param query It could be a string, string literal, [NapiConfig object](https://ast-grep.github.io/reference/api.html#napiconfig)
 * @param callback Function which will be called for each found node wich accepts one argument - object with helpers, which could be used to manipulate the found nodes. Callback will have all the helpers that `astGrep` returns, like `map`, `replace` etc...
 * @example
 * ```ts
 * // Use callback
 * await astGrep("console.log($$$ARGS)", async ({ map, replace }) => {
 *   console.log(`Found code occurencies: ${(await map(({ getNode }) => getNode().text())).join(", ")}`);
 *   await replace("console.error($$$ARGS)");
 * })
 * ```
 * @see {@link map}
 * @see {@link filter}
 * @see {@link exists}
 * @see {@link replace}
 * @see {@link ai}
 */
export declare function astGrepLogic(query: string | readonly string[] | NapiConfig, callback: (helpers: AstGrepHelpers) => Promise<void> | void): ReturnType;
export declare const astGrep: typeof astGrepLogic;
export type ReturnType = PLazy<AstGrepHelpers> & AstGrepHelpers;
export type ReturnTypeAPI = PLazy<AstGrepAPIHelpers> & AstGrepAPIHelpers;
declare const astGrepHelpers: {
    replace: typeof import("./replace.js").replaceLogic;
    map: typeof import("./map.js").mapLogic;
    ai: typeof import("../ai/ai.js").aiLogic;
    filter: typeof import("./filter.js").filterLogic;
    exists: typeof import("./exists.js").existsLogic;
};
declare const astGrepAPIHelpers: {
    astGrep: typeof astGrepLogic;
};
