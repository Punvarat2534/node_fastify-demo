export declare class PLazy<ValueType> extends Promise<ValueType> {
    #private;
    constructor(executor: (resolve: (resolvedValue: ValueType) => void, reject: (error: any) => void) => void);
    static from(function_: any): PLazy<unknown>;
    static resolve(value: any): PLazy<unknown>;
    static reject(error: any): PLazy<unknown>;
    then<TResult1 = ValueType, TResult2 = never>(onFulfilled: ((resolvedValue: ValueType) => TResult1 | PromiseLike<TResult1>) | null | undefined, onRejected: ((error: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    catch(onRejected: any): Promise<ValueType>;
}
