import type { PLazy } from "./PLazy.js";
import { getImports } from "./astGrep/getImports.js";
export type JsFilesReturn = PLazy<Helpers> & Helpers;
/**
 * @description Filter all js/ts files in current directory
 * @deprecated Use `files().jsFam()` instead
 */
export declare function jsFilesLogic(): JsFilesReturn;
/**
 * @description Filter file by glob pattern
 * @deprecated Use `files(glob).jsFam()` instead
 * @param globs string or array of globs to search for a files, could be comma/space separated string
 * @example
 * ```ts
 *   await jsFiles('src/app.ts,src/**âˆ•*.tsx').astGrep`import React from 'react'`;
 * ```
 */
export declare function jsFilesLogic(globs: string | readonly string[]): JsFilesReturn;
/**
 * @description Filter file by glob pattern and apply callback
 * @deprecated Use `files(glob).jsFam(callback)` instead
 */
export declare function jsFilesLogic(globs: string | readonly string[], callback: (helpers: Helpers) => void | Promise<void>): JsFilesReturn;
/**
 * @description Filter all js/ts files in current directory and apply callback
 * @deprecated Use `files().jsFam(callback)` instead
 */
export declare function jsFilesLogic(callback: (helpers: Helpers) => void | Promise<void>): JsFilesReturn;
export declare const jsFiles: typeof jsFilesLogic;
declare const helpers: {
    astGrep: typeof import("./astGrep/astGrep.js").astGrepLogic;
    getImports: typeof getImports;
    addImport: (line: string) => void;
    removeImport: (line: string) => void;
};
type Helpers = typeof helpers;
export {};
