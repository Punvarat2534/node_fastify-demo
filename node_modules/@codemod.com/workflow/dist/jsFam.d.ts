import type { PLazy } from "./PLazy.js";
import { getImports } from "./astGrep/getImports.js";
export type JsFamReturn = PLazy<Helpers> & Helpers;
/**
 * @description Adds javascript/typescript context to get specific helpers (jscodeshift, work with imports). Also, it will change glob pattern for `files()` search function.
 * @example
 * ```ts
 * await files()
 *   .jsFam()
 *   .jscodeshift((file, api) => {
 *     const j = api.jscodeshift;
 *     return j(file.source)
 *       .find(j.Identifier)
 *       .forEach((path) => {
 *         j(path).replaceWith(j.identifier("Hello"));
 *       })
 *   })
 * ```
 */
export declare function jsFamLogic(): JsFamReturn;
/**
 * @description Adds javascript/typescript context to get specific helpers (jscodeshift, work with imports). Also, it will change glob pattern for `files()` search function.
 * @param callback - A function that will be executed in the context of the javascript/typescript helpers.
 * @example
 * ```ts
 * await files()
 *   .jsFam(({ jscodeshift }) => {
 *     jscodeshift((file, api) => {
 *       const j = api.jscodeshift;
 *       return j(file.source)
 *         .find(j.Identifier)
 *         .forEach((path) => {
 *           j(path).replaceWith(j.identifier("Hello"));
 *         })
 *     })
 *   })
 * ```
 * @see {@link astGrep}
 * @see {@link jscodeshift}
 * @see {@link addImport}
 * @see {@link removeImport}
 */
export declare function jsFamLogic(callback: (helpers: Helpers) => void | Promise<void>): JsFamReturn;
export declare const jsFam: typeof jsFamLogic;
declare const helpers: {
    astGrep: typeof import("./astGrep/astGrep.js").astGrepLogic;
    getImports: typeof getImports;
    addImport: (line: string) => void;
    removeImport: (line: string) => void;
    jscodeshift: typeof import("./jsFam/jscodeshift.js").jscodeshiftLogic;
};
export type Helpers = typeof helpers;
export {};
