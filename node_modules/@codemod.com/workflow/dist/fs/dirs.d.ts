import * as glob from "glob";
import type { PLazy } from "../PLazy.js";
type DirsParams = {
    dirs: string | readonly string[];
    create?: boolean;
    ignore?: string | string[] | glob.IgnoreLike;
};
/**
 * @description Run a callback for each directory matching the pattern
 * @param pattern Glob pattern or array of glob patterns
 * @param cb
 * @example dirs`apps`
 *            .jsFiles`*.ts`
 *            .astGrep`import React from 'react'`
 *            .remove();
 * @example dirs('apps/*', async ({ jsFiles }) => {
 *            await jsFiles`*.ts`
 *              .astGrep`import React from 'react'`
 *              .remove();
 *          });
 * @example dirs(async ({ jsFiles }) => {
 *            await jsFiles`*.ts`
 *              .astGrep`import React from 'react'`
 *              .remove();
 *          });
 */
export declare function dirsLogic(pattern: string | readonly string[] | DirsParams, callback?: (helpers: DirsHelpers) => Promise<void> | void): PLazy<DirsHelpers> & DirsHelpers;
export declare const dirs: typeof dirsLogic;
declare const dirsHelpers: {
    dirs: typeof dirsLogic;
    jsFiles: typeof import("../jsFiles.js").jsFilesLogic;
    codemod: typeof import("../codemod.js").codemodLogic;
    exec: typeof import("../exec.js").execLogic;
    move: typeof import("./move.js").moveLogic;
    map: typeof import("./map.js").mapLogic;
    files: typeof import("../files.js").filesLogic;
};
type DirsHelpers = typeof dirsHelpers;
export {};
