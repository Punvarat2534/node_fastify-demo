import type { PLazy } from "../PLazy.js";
interface BranchOptions {
    /**
     * @description Branch name to checkout
     */
    branch: string;
    /**
     * @description Force checkout to branch
     * @default true
     */
    force?: boolean;
}
export type BranchReturn = PLazy<BranchHelpers> & BranchHelpers;
/**
 * @description Creates branch for every repository
 * @param newBranch Branch name to checkout, could be a string or an object with branch and force
 * @example
 * ```ts
 * // chain call
 * import { git } from '@codemod.com/workflow'
 * await git.clone('git@github.com:codemod-com/codemod.git')
 *   .branch('new-branch')
 * ```
 * @example
 * ```ts
 * // existing branch
 * import { git } from '@codemod.com/workflow'
 * await git.clone('git@github.com:codemod-com/codemod.git')
 *   .branch({
 *     branch: 'new-branch',
 *     force: false
 *   })
 * ```
 * @see {@link jsFiles}
 * @see {@link files}
 * @see {@link dirs}
 * @see {@link exec}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link codemod}
 */
export declare function branchLogic(newBranch: string | BranchOptions): BranchReturn;
/**
 * Creates branch for current repository
 * @param newBranch Branch name to checkout, could be a string or an object with branch and force
 * @param callback A callback would be called after the branch is created with first argument as helpers
 * @example
 * ```ts
 * // inside callback
 * import { git } from '@codemod.com/workflow'
 * await git.clone('git@github.com:codemod-com/codemod.git', async ({ branch }) => {
 *   await branch('new-branch')
 * })
 * ```
 * @see {@link jsFiles}
 * @see {@link files}
 * @see {@link dirs}
 * @see {@link exec}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link codemod}
 */
export declare function branchLogic(newBranch: string | BranchOptions, callback: (helpers: BranchHelpers) => void | Promise<void>): BranchReturn;
export declare const branch: typeof branchLogic;
declare const branchHelpers: {
    jsFiles: typeof import("../jsFiles.js").jsFilesLogic;
    commit: typeof import("./commit.js").commitLogic;
    push: typeof import("./push.js").pushLogic;
    dirs: typeof import("../fs/dirs.js").dirsLogic;
    codemod: typeof import("../codemod.js").codemodLogic;
    exec: typeof import("../exec.js").execLogic;
    files: typeof import("../files.js").filesLogic;
};
export type BranchHelpers = typeof branchHelpers;
export {};
