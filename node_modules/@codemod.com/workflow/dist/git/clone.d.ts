import type { PLazy } from "../PLazy.js";
interface CloneOptions {
    repository: string;
    branch?: string;
    shallow?: boolean;
}
export type CloneReturn = PLazy<CloneHelpers> & CloneHelpers;
/**
 * @description Clone a repository (could be used as follow up for github.fork)
 * @example
 * ```ts
 * import { github } from '@codemod.com/workflow'
 * await github.fork('git://github.com/codemod-com/codemod.git')
 *   .clone()
 *   .branch('new-branch')
 *   .files()
 *   .jsFam()
 *   .astGrep('console.log($$$ARGS)')
 *   .replace('console.error($$$ARGS)')
 * ```
 * @see {@link branch}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link files}
 * @see {@link jsFiles}
 * @see {@link pr}
 * @see {@link codemod}
 * @see {@link dirs}
 * @see {@link exec}
 */
export declare function cloneLogic(): CloneReturn;
/**
 * @description Clone a repository with a callback (could be used as follow up for github.fork)
 * @param callback A callback would be called after the repositories are cloned with first argument as helpers
 * @example
 * ```ts
 * import { github } from '@codemod.com/workflow'
 * await github.fork('git://github.com/codemod-com/codemod.git')
 *   .clone(({ branch, commit, push, files }) => {
 *     await branch('new-branch')
 *     await files()
 *       .jsFam()
 *       .astGrep('console.log($$$ARGS)')
 *       .replace('console.error($$$ARGS)')
 *     await commit('feat: new branch')
 *     await push()
 * })
 * ```
 * @see {@link branch}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link files}
 * @see {@link jsFiles}
 * @see {@link pr}
 * @see {@link codemod}
 * @see {@link dirs}
 * @see {@link exec}
 */
export declare function cloneLogic(callback: (helpers: CloneHelpers) => void | Promise<void>): CloneReturn;
/**
 * @description Clone repositories
 * @param repositories List of repositories to clone, could be a string, template literals can be used to pass multiple repositories, array of strings, objects with repository and branch to clone
 * @example
 * ```ts
 * import { github } from '@codemod.com/workflow'
 * await github.clone('git://github.com/codemod-com/codemod.git')
 *   .branch('new-branch')
 *   .files()
 *   .jsFam()
 *   .astGrep('console.log($$$ARGS)')
 *   .replace('console.error($$$ARGS)')
 * ```
 * @see {@link branch}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link files}
 * @see {@link jsFiles}
 * @see {@link pr}
 * @see {@link codemod}
 * @see {@link dirs}
 * @see {@link exec}
 */
export declare function cloneLogic(repositories: (string | CloneOptions)[] | string | readonly string[] | CloneOptions | CloneOptions[]): CloneReturn;
/**
 * @description Clone repositories with a callback
 * @param repositories List of repositories to clone, could be a string, template literals can be used to pass multiple repositories, array of strings, objects with repository and branch to clone
 * @param callback A callback would be called after the repositories are cloned with first argument as helpers
 * @example
 * ```ts
 * import { github } from '@codemod.com/workflow'
 * await github.clone('git://github.com/codemod-com/codemod.git', ({ branch, commit, push, files }) => {
 *   await branch('new-branch')
 *   await files()
 *     .jsFam()
 *     .astGrep('console.log($$$ARGS)')
 *     .replace('console.error($$$ARGS)')
 *   await commit('feat: new branch')
 *   await push()
 * })
 * ```
 * @see {@link branch}
 * @see {@link commit}
 * @see {@link push}
 * @see {@link files}
 * @see {@link jsFiles}
 * @see {@link pr}
 * @see {@link codemod}
 * @see {@link dirs}
 * @see {@link exec}
 */
export declare function cloneLogic(repositories: (string | CloneOptions)[] | string | readonly string[] | CloneOptions | CloneOptions[], callback: (helpers: CloneHelpers) => void | Promise<void>): CloneReturn;
export declare const clone: typeof cloneLogic;
declare const cloneHelpers: {
    jsFiles: typeof import("../jsFiles.js").jsFilesLogic;
    branch: typeof import("./branch.js").branchLogic;
    commit: typeof import("./commit.js").commitLogic;
    push: typeof import("./push.js").pushLogic;
    dirs: typeof import("../fs/dirs.js").dirsLogic;
    codemod: typeof import("../codemod.js").codemodLogic;
    exec: typeof import("../exec.js").execLogic;
    files: typeof import("../files.js").filesLogic;
    pr: typeof import("../github/pr.js").prLogic;
};
export type CloneHelpers = typeof cloneHelpers;
export {};
