import * as contexts from "./contexts.js";
export * from "./contexts.js";
import { git } from "./git/git.js";
import { SgNode, astGrep } from "./astGrep/astGrep.js";
import { jsFiles } from "./jsFiles.js";
import { dirs } from "./fs/dirs.js";
import { codemod } from "./codemod.js";
import { getTree } from "./engineHelpers.js";
import { files } from "./files.js";
import { exec } from "./exec.js";
import { question } from "./question.js";
import { github } from "./github/github.js";
import { AuthServiceInterface, setAuthService } from "./authService.js";
export { git, astGrep, jsFiles, contexts, dirs, codemod, getTree, files, exec, question, github, setAuthService, AuthServiceInterface, SgNode, };
export declare const api: {
    git: {
        clone: typeof import("./git/clone.js").cloneLogic;
        branch: typeof import("./git/branch.js").branchLogic;
        push: typeof import("./git/push.js").pushLogic;
        commit: typeof import("./git/commit.js").commitLogic;
    };
    astGrep: typeof import("./astGrep/astGrep.js").astGrepLogic;
    jsFiles: typeof import("./jsFiles.js").jsFilesLogic;
    contexts: typeof contexts;
    dirs: typeof import("./fs/dirs.js").dirsLogic;
    codemod: typeof import("./codemod.js").codemodLogic;
    getTree: () => {
        children: {
            name: string;
            hash: string;
            arguments: any[];
            children: any[];
        }[];
    };
    files: typeof import("./files.js").filesLogic;
    exec: typeof import("./exec.js").execLogic;
    question: typeof import("./question.js").questionLogic;
    github: {
        fork: typeof import("./github/fork.js").forkLogic;
        pr: typeof import("./github/pr.js").prLogic;
    };
    setAuthService: typeof setAuthService;
};
export { isWorkflowEngineFile } from "./isWorkflowEngineFile.js";
export type Api = typeof api;
