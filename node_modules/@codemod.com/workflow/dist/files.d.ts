import type { PLazy } from "./PLazy.js";
export type FilesReturn = PLazy<Helpers> & Helpers;
/**
 * @description Will find all the files in current working directory. If following function will be called to get specific context, for example `files().jsFam()` - it will search for any js/ts file, basically it will change behaviour of files function.
 * @example
 * ```ts
 * // will search for all the files within current working directory with **∕* pattern
 * await files().astGrep`import React from 'react'`
 * ```
 * @see {@link jsFam}
 * @see {@link astGrep}
 * @see {@link json}
 * @see {@link yaml}
 * @see {@link move}
 * @example
 * ```ts
 * // will search for all the js/ts files within current working directory using **∕*.{js,ts,jsx,tsx,cjs,mjs} pattern
 * await files().jsFam().astGrep`import React from 'react'`
 * ```
 */
export declare function filesLogic(): FilesReturn;
/**
 * @description Filter file by glob pattern
 * @param globs string or array of globs to search for a files, could be comma/space separated string
 * @example
 * ```ts
 *   await jsFiles('src/app.ts,src/**∕*.tsx').astGrep`import React from 'react'`;
 * ```
 * @see {@link jsFam}
 * @see {@link astGrep}
 * @see {@link json}
 * @see {@link yaml}
 * @see {@link move}
 */
export declare function filesLogic(globs: string | readonly string[]): FilesReturn;
export declare function filesLogic(globs: string | readonly string[], callback: (helpers: Helpers) => void | Promise<void>): FilesReturn;
export declare function filesLogic(callback: (helpers: Helpers) => void | Promise<void>): FilesReturn;
export declare const files: typeof filesLogic;
declare const helpers: {
    jsFam: typeof import("./jsFam.js").jsFamLogic;
    move: typeof import("./fs/move.js").moveLogic;
    astGrep: typeof import("./astGrep/astGrep.js").astGrepLogic;
    yaml: typeof import("./yaml/yaml.js").yamlLogic;
    json: typeof import("./json/json.js").jsonLogic;
};
type Helpers = typeof helpers;
export {};
